# -*- coding: utf-8 -*-
"""Train and Save the Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oU50SiEKPuWbc2p4siiGdgSpB_HwluVi
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

data=pd.read_csv('Admission_Predict.csv')

data.head()

data.tail()

data.drop(["Serial No."],axis=1,inplace=True)
data.head()

data.info()

data.describe()

"""## Data visualization"""

plt.scatter(data['CGPA'],data['Chance of Admit '])
plt.show()

plt.bar(data['GRE Score'],data['Chance of Admit '])
plt.show()

"""## Splitting the dependent and independent column"""

x=data.iloc[:,0:7].values
x.shape

y=data.iloc[:,7:].values
y.shape

"""## Splitting the data into train and test"""

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=10)

y_train=(y_train>0.5)
y_train

y_test=(y_test>0.5)
y_test

"""## Training and testing the model"""

X=data.drop(['Chance of Admit '],axis=1) #input data_set
y=data['Chance of Admit '] #output labels

from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15)

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
X_train[X_train.columns] = scaler.fit_transform(X_train[X_train.columns])
X_test[X_test.columns] = scaler.transform(X_test[X_test.columns])
X_train.head()

from sklearn.ensemble import GradientBoostingRegressor
rgr = GradientBoostingRegressor()
rgr.fit(X_train,y_train)

rgr.score(X_test,y_test)

y_predict=rgr.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score,mean_absolute_error
import numpy as np
print('Mean Absolute Error:', mean_absolute_error(y_test, y_predict))  
print('Mean Squared Error:', mean_squared_error(y_test, y_predict))  
print('Root Mean Squared Error:', np.sqrt(mean_squared_error(y_test, y_predict)))

y_train = (y_train>0.5)
y_test = (y_test>0.5)

from sklearn.linear_model._logistic import LogisticRegression

lore = LogisticRegression(random_state=0, max_iter=1000)

lr = lore.fit(X_train, y_train)

y_pred = lr.predict(X_test)

from sklearn.metrics import accuracy_score, recall_score, roc_auc_score, confusion_matrix

print('Accuracy Score:', accuracy_score(y_test, y_pred))  
print('Recall Score:', recall_score(y_test, y_pred))  
print('ROC AUC Score:', roc_auc_score(y_test, y_pred))
print('Confussion Matrix:\n', confusion_matrix(y_test, y_pred))

"""## Save the model """

import pickle
pickle.dump(lr,open('university_admission.pkl','wb'))

model=pickle.load(open('university_admission.pkl','rb'))

